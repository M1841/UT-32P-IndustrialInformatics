// <auto-generated />
using System;
using EMR_BMED.Backend.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EMR_BMED.Backend.Migrations
{
    [DbContext(typeof(DbService))]
    [Migration("20250523080816_FixDelete")]
    partial class FixDelete
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EMR_BMED.Backend.Models.MedicationModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Contraindications")
                        .HasColumnType("text");

                    b.Property<string>("Form")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Indications")
                        .HasColumnType("text");

                    b.Property<bool>("IsPresRequired")
                        .HasColumnType("bit")
                        .HasColumnName("Requires_Prescription");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SideEffects")
                        .HasColumnType("text");

                    b.Property<string>("Storing")
                        .HasColumnType("text");

                    b.Property<string>("Warnings")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("Form");

                    b.HasIndex("Method");

                    b.HasIndex("Name");

                    b.ToTable("Medication");
                });

            modelBuilder.Entity("EMR_BMED.Backend.Models.PrescriptionModel", b =>
                {
                    b.Property<Guid>("GlobalID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PID");

                    b.Property<Guid>("SeriesID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Series");

                    b.Property<Guid>("NumberID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Number");

                    b.Property<string>("CAS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CUI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DaysNumber")
                        .HasColumnType("int");

                    b.Property<string>("Diagnostic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorModel")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsAcorduriInternationale")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAjutorSocial")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAmbulatory")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCardEuropean")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCoasigurat")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCopil")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsGravida")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHandicap")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHospital")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLiberProfesionist")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLowIncome")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMF")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMFMM")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOther")
                        .HasColumnType("bit");

                    b.Property<string>("IsOtherCategories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsPensionar")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPersonalContractual")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRevolutionar")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSalariat")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSomaj")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsStudent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVeteran")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Issued")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PNS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientModel")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrescriptionModel")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GlobalID", "SeriesID", "NumberID");

                    b.HasIndex("DoctorId");

                    b.HasIndex("Issued");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("EMR_BMED.Backend.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsDoctor")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("Verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("Surname");

                    b.ToTable("Users");

                    b.HasDiscriminator<bool>("IsDoctor");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PrescriptionRecord", b =>
                {
                    b.Property<Guid>("MedicationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrescriptionsGlobalID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrescriptionsSeriesID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrescriptionsNumberID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MedicationID", "PrescriptionsGlobalID", "PrescriptionsSeriesID", "PrescriptionsNumberID");

                    b.HasIndex("PrescriptionsGlobalID", "PrescriptionsSeriesID", "PrescriptionsNumberID");

                    b.ToTable("PrescriptionRecord");
                });

            modelBuilder.Entity("EMR_BMED.Backend.Models.DoctorModel", b =>
                {
                    b.HasBaseType("EMR_BMED.Backend.Models.UserModel");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("MedicalField")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(true);
                });

            modelBuilder.Entity("EMR_BMED.Backend.Models.PatientModel", b =>
                {
                    b.HasBaseType("EMR_BMED.Backend.Models.UserModel");

                    b.Property<string>("Allergies")
                        .HasColumnType("text");

                    b.Property<string>("Blood")
                        .HasColumnType("char(3)");

                    b.Property<string>("Citizenship")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Conditions")
                        .HasColumnType("text");

                    b.Property<string>("Intolerances")
                        .HasColumnType("text");

                    b.Property<string>("SocialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(false);
                });

            modelBuilder.Entity("EMR_BMED.Backend.Models.PrescriptionModel", b =>
                {
                    b.HasOne("EMR_BMED.Backend.Models.DoctorModel", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EMR_BMED.Backend.Models.PatientModel", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PrescriptionRecord", b =>
                {
                    b.HasOne("EMR_BMED.Backend.Models.MedicationModel", null)
                        .WithMany()
                        .HasForeignKey("MedicationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EMR_BMED.Backend.Models.PrescriptionModel", null)
                        .WithMany()
                        .HasForeignKey("PrescriptionsGlobalID", "PrescriptionsSeriesID", "PrescriptionsNumberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EMR_BMED.Backend.Models.DoctorModel", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("EMR_BMED.Backend.Models.PatientModel", b =>
                {
                    b.Navigation("Prescriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
